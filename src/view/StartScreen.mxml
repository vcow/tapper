<?xml version="1.0"?>
<f:LayoutGroup xmlns:f="library://ns.feathersui.com/mxml" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:view="view.*"
               addedToStage="startAnimation()" removedFromStage="stopAnimation()">
    <f:layout>
        <f:AnchorLayout/>
    </f:layout>

    <f:LayoutGroup backgroundSkin="{new Image(atlas.getTexture('back'))}"
                   minWidth="576" minHeight="1024">
        <f:layout>
            <f:AnchorLayout/>
        </f:layout>
        <f:layoutData>
            <f:AnchorLayoutData horizontalCenter="0" verticalCenter="0"/>
        </f:layoutData>

        <f:LayoutGroup>
            <f:layoutData>
                <f:AnchorLayoutData horizontalCenter="-10" top="132"/>
            </f:layoutData>

            <view:Globe id="globe"/>
        </f:LayoutGroup>

        <view:StartScreenTitle id="title" filter="{new GlowFilter(0xff3838)}">
            <view:layoutData>
                <f:AnchorLayoutData horizontalCenter="0" top="14"/>
            </view:layoutData>
        </view:StartScreenTitle>

        <f:LayoutGroup id="buttonGroupContainer"  minHeight="370">
            <f:layout>
                <f:AnchorLayout/>
            </f:layout>
            <f:layoutData>
                <f:AnchorLayoutData horizontalCenter="0" bottom="53"/>
            </f:layoutData>

            <view:StartScreenProgress progress="{progress}" animationComplete="onAnimationComplete()"
                                      visible="{_progressVisible}">
                <view:layoutData>
                    <f:AnchorLayoutData bottom="0"/>
                </view:layoutData>
            </view:StartScreenProgress>
        </f:LayoutGroup>
    </f:LayoutGroup>

    <f:Button id="settingsButton" styleProvider="{StylesLibrary.titleSettingsButtonStyleProvider}"
              triggered="onSettings()" alpha="0" isEnabled="false">
        <f:layoutData>
            <f:AnchorLayoutData right="13" bottom="11"/>
        </f:layoutData>
    </f:Button>

    <fx:Metadata>
        [Event(name="continueGame", type="starling.events.Event")]
        [Event(name="newGame", type="starling.events.Event")]
        [Event(name="openVip", type="starling.events.Event")]
        [Event(name="openPantheon", type="starling.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import app.AppFacade;

        import feathers.binding.utils.BindingUtils;
        import feathers.binding.utils.ChangeWatcher;

        import mediators.StartScreenMediator;

        import org.puremvc.as3.multicore.patterns.facade.Facade;

        import resources.AtlasLibrary;
        import resources.StylesLibrary;

        import starling.animation.Tween;
        import starling.core.Starling;
        import starling.display.Image;
        import starling.events.Event;
        import starling.filters.GlowFilter;
        import starling.textures.TextureAtlas;

        public static const MEDIATOR_NAME:String = "startScreenMediator";

        private static var _atlas:TextureAtlas;
        private static function get atlas():TextureAtlas
        {
            if (!_atlas)
            {
                _atlas = AtlasLibrary.getInstance().manager.getTextureAtlas("title");
            }
            return _atlas;
        }

        private var _progress:Number = 0;

        private var _hasGameWatcher:ChangeWatcher;
        private var _buttonGroup:StartScreenButtonGroup;

        [Bindable]
        private var _mediator:StartScreenMediator;

        [Bindable]
        private var _progressVisible:Boolean;

        [Bindable(event="progressChanged")]
        public function get progress():Number
        {
            return _progress;
        }

        public function set progress(value:Number):void
        {
            _progressVisible = true;
            if (value == _progress) return;
            _progress = value;
            dispatchEventWith("progressChanged");
        }

        override protected function initialize():void
        {
            super.initialize();

            var mediator:StartScreenMediator;
            var facade:AppFacade = Facade.getInstance(AppFacade.NAME) as AppFacade;
            if (facade.hasMediator(MEDIATOR_NAME))
            {
                mediator = facade.retrieveMediator(MEDIATOR_NAME) as StartScreenMediator;
                mediator.setViewComponent(this);
            }
            else
            {
                mediator = new StartScreenMediator(MEDIATOR_NAME, this);
                facade.registerMediator(mediator);
            }
            _mediator = mediator;

            if (_mediator)
                _hasGameWatcher = BindingUtils.bindSetter(onHasGameWatcher, _mediator, "hasCurrentGame");

            if (stage) startAnimation();
        }

        private function onHasGameWatcher(value:Boolean):void
        {
            if (_buttonGroup) _buttonGroup.canContinueGame = value;
        }

        private function startAnimation():void
        {
            Starling.juggler.add(globe);
            Starling.juggler.add(title);
        }

        private function stopAnimation():void
        {
            Starling.juggler.remove(globe);
            Starling.juggler.remove(title);
        }

        override public function dispose():void
        {
            stopAnimation();

            if (_mediator)
            {
                var facade:AppFacade = Facade.getInstance(AppFacade.NAME) as AppFacade;
                facade.removeMediator(_mediator.getMediatorName());
                _mediator = null;

                _hasGameWatcher.unwatch();
            }

            if (_buttonGroup)
                _buttonGroup.removeEventListener(starling.events.Event.TRIGGERED, onButtonClick);

            super.dispose();
        }

        private function onAnimationComplete():void
        {
            if (!_buttonGroup)
            {
                _buttonGroup = new StartScreenButtonGroup();
                _buttonGroup.canContinueGame = _mediator.hasCurrentGame;
                _buttonGroup.touchable = false;
                _buttonGroup.addEventListener(starling.events.Event.TRIGGERED, onButtonClick);
                buttonGroupContainer.addChild(_buttonGroup);
            }

            for (var i:int = 0, l:int = _buttonGroup.numChildren; i < l; i++)
            {
                var bn:starling.display.DisplayObject = _buttonGroup.getChildAt(i);
                var tween:Tween = new Tween(bn, 0.5);
                tween.fadeTo(1.0);
                tween.delay = 0.1 * i;
                Starling.juggler.add(tween);
            }

            if (tween)
            {
                tween.onCompleteArgs = [_buttonGroup];
                tween.onComplete = function (buttonGroup:starling.display.DisplayObject):void
                {
                    buttonGroup.touchable = true;
                }
            }
            else
            {
                _buttonGroup.touchable = true;
            }

            settingsButton.isEnabled = true;
            tween = new Tween(settingsButton, 0.5);
            tween.fadeTo(1.0);
            Starling.juggler.add(tween);

            SoundManager.getInstance().playMusic(AtlasLibrary.getInstance().manager.getSound("title"), false, false);
        }

        private function onButtonClick(event:starling.events.Event):void
        {
            dispatchEventWith(event.data.toString());
        }

        private function onSettings():void
        {
            var settingsPopup:SettingsPopup = new SettingsPopup();
            settingsPopup.addEventListener(starling.events.Event.CLOSE, function (event:starling.events.Event):void
            {
                settingsPopup.removeEventListener(starling.events.Event.CLOSE, arguments.callee);
                settingsButton.isEnabled = true;
            });
            WindowManager.getInstance().openWindow(settingsPopup, true);
            settingsButton.isEnabled = false;
        }
        ]]></fx:Script>
</f:LayoutGroup>