<?xml version="1.0"?>
<f:LayoutGroup xmlns:f="library://ns.feathersui.com/mxml" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:view="view.*">
    <f:layout>
        <f:AnchorLayout/>
    </f:layout>

    <f:LayoutGroup backgroundSkin="{new Image(atlas.getTexture('top_back'))}" minWidth="576" minHeight="1024">
        <f:layout>
            <f:AnchorLayout/>
        </f:layout>
        <f:layoutData>
            <f:AnchorLayoutData verticalCenter="0" horizontalCenter="0"/>
        </f:layoutData>

        <f:List dataProvider="{_mediator.topList}" itemRendererType="view.TopListItemRenderer" clipContent="false">
            <f:layoutData>
                <f:AnchorLayoutData horizontalCenter="2" top="125"/>
            </f:layoutData>
            <f:layout>
                <f:VerticalLayout gap="5"/>
            </f:layout>
        </f:List>

        <view:PantheonMenu id="pantheonMenu" exit="{dispatchEventWith('back')}"
                           save="{dispatchEventWith('setUserData')}">
            <view:layoutData>
                <f:AnchorLayoutData/>
            </view:layoutData>
        </view:PantheonMenu>
    </f:LayoutGroup>

    <f:LayoutGroup maxWidth="560" maxHeight="191" backgroundSkin="{new Image(atlas.getTexture('top_blackboard'))}"
                   visible="{_mediator.userItem != null}">
        <f:layout>
            <f:VerticalLayout horizontalAlign="center" paddingTop="37" gap="14"/>
        </f:layout>
        <f:layoutData>
            <f:AnchorLayoutData horizontalCenter="1" bottom="-26"/>
        </f:layoutData>

        <f:Label text="{getUserTitle(_mediator.userItem)}" scaleX="0.82" paddingRight="22"
                 textRendererProperties="{{textFormat: new BitmapFontTextFormat('top_loser', 32, 0xebebeb)}}"/>

        <f:Label text="{getUserScores(_mediator.userItem)}" scaleX="0.82" paddingRight="14"
                 textRendererProperties="{{textFormat: new BitmapFontTextFormat('top_loser', NaN, 0xebebeb)}}"/>
    </f:LayoutGroup>

    <fx:Metadata>
        [Event(name="back", type="starling.events.Event")]
        [Event(name="authenticate", type="starling.events.Event")]
        [Event(name="setUserName", type="starling.events.Event")]
        [Event(name="setUserData", type="starling.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import app.AppFacade;

        import feathers.text.BitmapFontTextFormat;

        import mediators.PantheonScreenMediator;

        import org.puremvc.as3.multicore.patterns.facade.Facade;

        import resources.AtlasLibrary;
        import resources.locale.LocaleManager;

        import starling.display.Image;
        import starling.events.Event;
        import starling.textures.TextureAtlas;

        import vo.TopItem;

        public static const MEDIATOR_NAME:String = "pantheonScreenMediator";

        private static var _atlas:TextureAtlas;
        private static function get atlas():TextureAtlas
        {
            if (!_atlas)
            {
                _atlas = AtlasLibrary.getInstance().manager.getTextureAtlas("common_1");
            }
            return _atlas;
        }

        [Bindable]
        public var _mediator:PantheonScreenMediator;

        private static function getUserTitle(user:TopItem):String
        {
            if (!user) return "";
            return LocaleManager.getInstance().getString("common", "pantheon.record",
                    [user.place, user.name]);
        }

        private static function getUserScores(user:TopItem):String
        {
            if (!user) return "";
            return StringUtils.divideByDigits(user.scores);
        }

        override protected function initialize():void
        {
            super.initialize();

            var facade:AppFacade = Facade.getInstance(AppFacade.NAME) as AppFacade;
            if (facade.hasMediator(MEDIATOR_NAME))
            {
                _mediator = facade.retrieveMediator(MEDIATOR_NAME) as PantheonScreenMediator;
                _mediator.setViewComponent(this);
            }
            else
            {
                var mediator:PantheonScreenMediator = new PantheonScreenMediator(MEDIATOR_NAME, this);
                facade.registerMediator(mediator);
                _mediator = mediator;
            }
        }

        override public function dispose():void
        {
            if (_mediator)
            {
                var facade:AppFacade = Facade.getInstance(AppFacade.NAME) as AppFacade;
                facade.removeMediator(_mediator.getMediatorName());
                _mediator = null;
            }
            super.dispose();
        }

        public function showUserNameForm():void
        {
            var popup:PantheonRegisterPopUp = new PantheonRegisterPopUp();
            popup.addEventListener(starling.events.Event.CLOSE, onClosePopup);
            popup.scores = _mediator.scores;

            WindowManager.getInstance().openWindow(popup, true);
        }

        private function onClosePopup(event:starling.events.Event):void
        {
            var popup:PantheonRegisterPopUp = PantheonRegisterPopUp(event.target);
            popup.removeEventListener(starling.events.Event.CLOSE, onClosePopup);

            dispatchEventWith("setUserName", false, event.data == Const.ON_OK ? popup.userName : "");
        }
        ]]></fx:Script>
</f:LayoutGroup>