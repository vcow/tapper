<?xml version="1.0"?>
<f:LayoutGroup xmlns:f="library://ns.feathersui.com/mxml" xmlns:fx="http://ns.adobe.com/mxml/2009"
               backgroundSkin="{new Image(atlas.getTexture('settings_back'))}"
               maxWidth="505" maxHeight="504">
    <f:layout>
        <f:AnchorLayout/>
    </f:layout>

    <f:LayoutGroup>
        <f:layout>
            <f:VerticalLayout gap="5" horizontalAlign="center" verticalAlign="middle"/>
        </f:layout>
        <f:layoutData>
            <f:AnchorLayoutData left="30" right="30" top="94" bottom="110"/>
        </f:layoutData>

        <f:LayoutGroup>
            <f:layout>
                <f:HorizontalLayout gap="-17" verticalAlign="middle"/>
            </f:layout>

            <f:Slider id="soundSlider" styleProvider="{StylesLibrary.settingsSliderStyleProvider}"
                      minimum="0" maximum="1.0" change="{dispatchEventWith('soundChanged', false, soundSlider.value)}"
                      value="{_mediator.soundValue}"/>

            <f:Check id="soundOffCheck" defaultSkin="{new Image(atlas.getTexture('settings_sound_off_normal'))}"
                     downSkin="{new Image(atlas.getTexture('settings_sound_off_selected'))}"
                     defaultSelectedSkin="{new Image(atlas.getTexture('settings_sound_off_selected'))}"
                     change="{dispatchEventWith('soundSwitch', false, soundOffCheck.isSelected)}"
                     isSelected="{_mediator.soundOff}"/>
        </f:LayoutGroup>

        <f:LayoutGroup>
            <f:layout>
                <f:HorizontalLayout gap="-17" verticalAlign="middle"/>
            </f:layout>

            <f:Slider id="musicSlider" styleProvider="{StylesLibrary.settingsSliderStyleProvider}"
                      minimum="0" maximum="1.0" change="{dispatchEventWith('musicChanged', false, musicSlider.value)}"
                      value="{_mediator.musicValue}"/>

            <f:Check id="musicOffCheck" defaultSkin="{new Image(atlas.getTexture('settings_music_off_normal'))}"
                     downSkin="{new Image(atlas.getTexture('settings_music_off_selected'))}"
                     defaultSelectedSkin="{new Image(atlas.getTexture('settings_music_off_selected'))}"
                     change="dispatchEventWith('musicSwitch', false, musicOffCheck.isSelected)"
                     isSelected="{_mediator.musicOff}"/>
        </f:LayoutGroup>

        <f:Check id="godModeCheck" defaultIcon="{new Image(atlas.getTexture('settings_god_mode_normal'))}"
                 defaultSelectedIcon="{new Image(atlas.getTexture('settings_god_mode_selected'))}"
                 defaultLabelProperties="{{textFormat: new BitmapFontTextFormat('message_box_button')}}"
                 label="{LocaleManager.getInstance().getString('common', 'settings.godmode.bn.title')}"
                 isSelected="{!_mediator.godModeOff}" visible="{_mediator.hasGodMode}"
                 includeInLayout="{_mediator.hasGodMode}" gap="10" labelOffsetY="3"
                 change="{dispatchEventWith('switchGodMode', false, godModeCheck.isSelected)}"/>
    </f:LayoutGroup>

    <f:Button styleProvider="{StylesLibrary.settingsButtonStyleProvider}"
              label="{LocaleManager.getInstance().getString('common', 'settings.close.bn.title')}"
              triggered="{dispatchEventWith(starling.events.Event.CLOSE)}">
        <f:layoutData>
            <f:AnchorLayoutData horizontalCenter="3" bottom="31"/>
        </f:layoutData>
    </f:Button>

    <fx:Metadata>
        [Event(name="close", type="starling.events.Event")]
        [Event(name="soundChanged", type="starling.events.Event")]
        [Event(name="musicChanged", type="starling.events.Event")]
        [Event(name="soundSwitch", type="starling.events.Event")]
        [Event(name="musicSwitch", type="starling.events.Event")]
        [Event(name="switchGodMode", type="starling.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import app.AppFacade;

        import feathers.text.BitmapFontTextFormat;

        import mediators.SettingsMediator;

        import org.puremvc.as3.multicore.patterns.facade.Facade;

        import resources.AtlasLibrary;
        import resources.StylesLibrary;
        import resources.locale.LocaleManager;

        import starling.display.Image;
        import starling.events.Event;
        import starling.textures.TextureAtlas;

        public static const MEDIATOR_NAME:String = "settingsMediator";

        [Bindable]
        public var _mediator:SettingsMediator;

        private static var _atlas:TextureAtlas;
        private static function get atlas():TextureAtlas
        {
            if (!_atlas)
            {
                _atlas = AtlasLibrary.getInstance().manager.getTextureAtlas("common_1");
            }
            return _atlas;
        }

        override protected function initialize():void
        {
            super.initialize();

            var facade:AppFacade = Facade.getInstance(AppFacade.NAME) as AppFacade;
            if (facade.hasMediator(MEDIATOR_NAME))
            {
                _mediator = facade.retrieveMediator(MEDIATOR_NAME) as SettingsMediator;
                _mediator.setViewComponent(this);
            }
            else
            {
                var mediator:SettingsMediator = new SettingsMediator(MEDIATOR_NAME, this);
                facade.registerMediator(mediator);
                _mediator = mediator;
            }
        }

        override public function dispose():void
        {
            if (_mediator)
            {
                var facade:AppFacade = Facade.getInstance(AppFacade.NAME) as AppFacade;
                facade.removeMediator(_mediator.getMediatorName());
                _mediator = null;
            }
            super.dispose();
        }
        ]]></fx:Script>
</f:LayoutGroup>